<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LLVM on /dev/urandom</title>
    <link>/tags/llvm/</link>
    <description>Recent content in LLVM on /dev/urandom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Sep 2018 19:49:49 +0800</lastBuildDate>
    
	<atom:link href="/tags/llvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LLVM Passes</title>
      <link>/archives/llvm-passes/</link>
      <pubDate>Sat, 22 Sep 2018 19:49:49 +0800</pubDate>
      
      <guid>/archives/llvm-passes/</guid>
      <description>Introduction One of the most important parts of a compiler is the optimization system. In LLVM, these works are done by LLVM Pass Framework. LLVM Passes perform various transforms/optimizations over functions, modules and so on. Besides, owing to its perfect modular design, passes could be combined and scheduled to construct successful compilers, like GHC, Swift etc. If you are interested in the ideas behind the LLVM compiler infrastructure, I recommend you going through this article LLVM - The Architecture of Open Source Applications by Chris Lattner.</description>
    </item>
    
  </channel>
</rss>